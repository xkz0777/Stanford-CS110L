A *reference* is like a pointer in that it’s an address we can follow to access data stored at that address that is owned by some other variable. Unlike a pointer, **a reference is guaranteed to point to a valid value of a particular type**.

The opposite of referencing by using `&` is *dereferencing*, which is accomplished with the dereference operator, `*`.

We call the action of creating a reference *borrowing*. As in real life, if a person owns something, you can borrow it from them. When you’re done, you have to give it back. You don’t own it.

Just as variables are immutable by default, so are references. We’re not allowed to modify something we have a reference to. We can use a *mutable reference* to modify a borrowed value. Mutable references have one big restriction: **you can have only one mutable reference to a particular piece of data at a time**.
